pico-8 cartridge // http://www.pico-8.com
version 16
__lua__

--[[
computer interjects and gives assignments to find other new attachments

ship always has weapon

ideas for upgrades to ship:
1. grabber (to pick up raw materials to make into further upgrades)
2. shield (allow access to previously inaccessible region (i.e. small area where enemy fire fills area and makes it impassable))
3. mine attachment (mine material for other attachment/open up previously inaccessible area)
4. powerful light (shine in dark areas, allows access to previously inaccessible region)
5. bomb or missile to clear an otherwise inaccessible region?
]]--

function _init()
    player = init_player()
    init_enemies()
end

function _update()
    update_gravity()
    update_controls()
    update_shots()
    update_enemies()
end

function _draw()
    cls()
    draw_map()
    player_animation()
    draw_shots()
    draw_enemies()
    draw_dashboard()
    debug()
    
end

function debug()
    -- **collision with wall**
    -- local x = player.x/8
    -- local y = player.y/8 
    -- print(x, 40, 20, 7)
    -- print(y, 40, 30, 7)
    -- local m = mget(x,y)
    -- print(fget(m,0),40,40,7)

    --print(#player.shots,40,20,7)
    --print(player.reload,40,20,7)
    -- for s in all(player.shots) do
    --     print(s.y,40,20,7)
    -- end
end

function init_player()
    p = {}
    p.x = 64
    p.y = 64
    p.flip = false
    p.sprite = 1
    p.burn = 0
    p.fuel = 100
    p.width = 8
    p.height = 8
    p.shots = {}
    p.reload = 1
    return p
end

function init_enemies()
    enemies = {}
end

function draw_dashboard()
    rectfill(0, 128, 128, 112, 1)
    draw_fuel_guage()
end

function draw_fuel_guage()
    if(player.fuel <= 0) then return end

    local amount = 39 + (player.fuel / 2)
    rectfill(39, 113, amount, 123, guage_clr())
end

function guage_clr()
    if(player.fuel < 75 and player.fuel >= 50) then return 10
    elseif(player.fuel < 50 and player.fuel >= 25) then return 9
    elseif(player.fuel < 25 and player.fuel >= 0) then return 8
    else return 11
    end
end

function draw_map()
    map(0,0, 0, 0, 16,14)
end

function draw_shots()
    for s in all(player.shots) do
        line (s.x+9, s.y+5, s.x+40, s.y+5, 7)
    end
end

function update_enemies()
    for e in all(enemies) do
        if(e.spawning == 42) then
            -- if(solid(e.x+1, e.y+1)) then
            --     e.x
            -- else
                e.x += 1
                e.y += 1
            -- end
            
        end
    end
    
    if(#enemies < 3) then
        local e = {}
        e.sprite = 53
        e.spawning = 37--for spawning animation
        e.frame = 1
        e.flip = false
        spawn_enemy(e)
        add(enemies, e)
    end

end

function spawn_enemy(e)
    e.x = rnd(128)
    e.y = rnd(104)
    if(solid(e.x,e.y+8)) then
        spawn_enemy(e)
    end
end

function draw_enemies()
    for e in all(enemies) do
        local s = e.sprite
        if(e.spawning < 42) then
            s = e.spawning
        end
        
        spr(s, e.x, e.y, 1, 1, e.flip)

        -- animate spawn
        if(e.frame % 4 == 1 and e.spawning < 42) then
            e.spawning+=1
        end

        -- animate enemy
        -- if(e.frame % 4 == 1) then
        --     e.sprite += 1
        -- else
        --     e.sprite -= 1
        -- end
        
        e.frame += 1
        
        if(e.frame == 48) then
            e.frame = 1
        end
    end
end

function update_gravity()
    if(btn(2) and player.fuel >= 0) then
        return
    end

    --if(player.y < 104) then 
    if(not solid(player.x, player.y+player.height)) then
        player.y += 1
        player.burn -= 1
        if(player.burn < 0) then player.burn = 0 end
    else
        player.burn = 0
    end
end

function update_shots()
   for s in all(player.shots) do
        if(s.flip == true) then
            if(solid(s.x, s.y)) then
                del(player.shots, s)
            else
                s.x -= 2
            end
        else
            if(solid(s.x+40, s.y)) then
                del(player.shots, s)
            else
                s.x += 2
            end
        end
        s.frame += 1
        if(s.frame > 20) then
            del(player.shots, s)
        end
    end 
end

function update_controls()
    if (btn(0)) then 
        left()
    end
    
    if (btn(1)) then
        right()
    end

    if (btn(2)) then 
        up()
    end
    
    if (btn(3)) then 
        down()
    end

    if(btn(5)) then
        player.fuel = 100
    end

    if(btnp(4)) then
        shoot()
    end

    if(btn(4)) then
        delay_shoot()
    end
end

function left()
    if(not solid(player.x-1, player.y)) then
        player.x = player.x - 1
    end
    player.flip = true
end

function right()
    if(not solid(player.x+player.width, player.y)) then
        player.x = player.x + 1
    end
    player.flip = false
end

function up()
    if(player.fuel <= 0) then
        return
    end

    if(not solid(player.x, player.y-1)) then
        player.y = player.y - 1
    end
    
    burn_fuel()
end

function down()
    --if(player.y < 104) then
    if(not solid(player.x, player.y+player.height)) then
        player.y = player.y + 1
    end
end

function shoot()
    local shot = {}
    shot.frame = 0
    shot.x = player.x-2
    if(player.flip) then
        shot.x -= 38
    end
    shot.y = player.y
    shot.l = 40
    shot.flip = player.flip
    add(player.shots, shot)
    p.reload = 1
end

function delay_shoot()
    if(10 / p.reload == 1) then
        shoot()
    else
        p.reload += 1
    end
end

function solid(x,y)
    local m = mget(x/8,y/8)
    return fget(m,0)
end

function burn_fuel()
    player.burn += 1
    if(player.burn > 30) then player.burn = 30 end
    player.fuel -= player.burn / 100
end

function player_animation()
    spr(player.sprite, player.x, player.y, 1, 1, player.flip)
    if(player.burn > 10) then
        local burnpos = player.x - 8
        local burnflip = false
        if(player.flip == true) then 
            burnpos = player.x + 8
            burnflip = true 
        end
        spr((player.burn / 10) + 2, burnpos, player.y, 1, 1, burnflip)
    end
end

__gfx__
00000000000000006600000000000000000000000000000000000000000666666666666666666666666660005005000000000000000000005000000500000000
000000009fa000000666000000000000000000000000000000000000006d0000700000000000060000006d005006000500000000000005000000060500000000
00700700099990000d6c7000000000000000000000000000000000000dd000700060007000006000077006505000000000000000000057500000000500000000
00077000029dc700056cc700000000000000000000000990000000005d0050000000000000000600000700655000060000006000000005000600000500000000
000770008d91cc70866dcc6000000098000000980000998800000000d00060000000600000606000000070d60500676000000700000000006760005000000000
00700700ef9955da966666660000000000000a99000aa99900000000d05676500005560000060000000000d60050060000000000000000000600050000000000
00000000829999f9854dd4dd00000098000000980000998800000000500060000000500000000000000000d60005000000000000000000000000500000000000
0000000000599f5005dff55000000000000000000000099000000000500050000000000000000000000000d60000555555555555555555555555000000000000
00055d670707070776d5500007070707d6767777000660007666555d5000000000000cc000050000000000dd0000000000000000000000000000000000000000
00d677660606060666776d000606060666666666006e76000000000050000070070031bc05000000000007dd0000000000000000000000000000000000000000
0d67666606060606666676d00606060656666666068777607666555d500000000000c11300006000007000dd0000000000000000000000000000000000000000
567666660606060666666765060606066666da8605887e60076655d05000000000000bc000070000000000d50000000000000000000000000000000000000000
56666d550505050555d66665050505055666da860058e60008855880500600000500000000600000000070d50000000000000000000000000000000000000000
d666d55505050505555d666d050505055666ddd600055000008aa800500006000000000000000050000000d50000000000000000000000000000000000000000
666655dd0d0d0d0ddd5566660d0d0d0d566666670005d00000899800506000000000000700000000000000d50000000000000000000000000000000000000000
766655d0000000000d5566670000000055dddd550005d00000088000500000000007000000070000000000d50000000000000000000000000000000000000000
00000000666666770000000000000000ddd667770000000000000000000000000000000000000000000000007000000700007000700000070000000000000000
766655d0560005d00d556667000005ddd66666670000000000000000000000000000000000000000000500000670067000066000067006700000000000000000
0000000005655d00000000000000dd5566666666000000000000000000000000000000000005000000060000066c766000cc7c00066c76600000000000000000
766655d0005670000d556667000d555d5666666600000000000000000000000000050000000600000007000000c7770066c7776000c777000000000000000000
00000000005d60000000000000d555d65666666600050000000600000007000000575000056765005677765000cc7c00066c7c6700cc7c000000000000000000
766655d005d056000d55666705d55d6656666666000000000000000000000000000500000006000000070000066cc67000cc6c00066cc6700000000000000000
000000005d500560000000000d55dd66566666660000000000000000000000000000000000050000000600000660066000066000066006600000000000000000
766655d0dd6666660d5566670d5dd6675556566d0000000000000000000000000000000000000000000500006000000600060000600000060000000000000000
766655d0000000000d55666706700d50000000009bb00000093000000930000000009a00000009a0000009a00070000000000000007000000000000000000000
666655ddd0d0d0d0dd5566660000000000d500678333bb00083bbb00083bbb000088aaa000888aaa00888aaa00a700000057000000a700000000000000000000
d766d55550505050555d666d06700d5000000000003377b0003b77b000bb77b008ee9a0008ee89a008ee89a000aa700000ccc00000aa70000000000000000000
57666d555050505055d666650000000000d5006709bcc7bb093cc7bb9bbcc7bb8ec7e0008ec7e0008ec7e000d77cc7add77aa7add77aa7ad0000000000000000
5676666660606060666667650670707700000000083ccc33083ccc33833ccc3388cc800088cc800088cc80005accc9955add59955999a9950000000000000000
0d67666660606060666676d0056060560660606700b3cc300033cc300033cc30088889a0088889a008889a0000aa90000099900000aa90000000000000000000
00d666666060606066776d000000000007d0d0d79bb333000933330009333300008eeaaa008eeaaa008eaaa000a900000000000000a900000000000000000000
00055d677070707076d5500000d5006700d50000833000000830000008300000000009a0000009a000009a0000d000000000000000d000000000000000000000
8a9000000900000000bbbb0099000000007777000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ea90000088700000b0b00b009a90000078008700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ee87700088c70000bbb00b00f9c700006b00b700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
de881c70988cc70000bbbb000d9cc70006b33b700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d8ee111788888880000bb000899dcca0551111ff0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08eee8dda8888e88000bb000a9999999555111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0088ddd008edd480003303008de99e6d0ddcccc00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000999800033033300059ad5000dddd000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000001010100010001000000000000000000010101010100000000000000000000000101010101000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
1011111111111111111111111111111200070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000001400000007070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000003300000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000003400000000000700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2024212124212124000000000000003300000000000007070700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002400000000000000000707000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200000000000000000000000000070000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000160000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000023313131313131313131313200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
